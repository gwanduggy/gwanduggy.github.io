{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Joshua\\\\GitHub\\\\pub-001\\\\react-01\\\\src\\\\app\\\\apps\\\\working-memory\\\\WorkingMemory.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport * as React from 'react';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst appDef = {\n  id: 'working-memory',\n  label: 'Working Memory',\n  component: WorkingMemory\n};\nexport default appDef;\nconst masterList = ['apple', 'eggs', 'elephant', 'trumpet', 'hammer', 'paper', 'sunflower', 'garlic', 'cheese', 'podcast', 'football', 'television', 'speaker', 'coffee', 'glue', 'super cali fragile istic expiala doe shehs'];\nfunction WorkingMemory(params) {\n  _s();\n  /**\r\n   * The available words left for picking\r\n   */\n  const [availableWords, setAvailableWords] = useState(new Set(masterList));\n\n  /**\r\n   * Number of words left to add to the list.\r\n   */\n  const [numRemaining, setNumRemaining] = useState(0);\n\n  /**\r\n   * The words to remember\r\n   */\n  const [words, setWords] = useState([]);\n\n  /**\r\n   * Should show the whole list.\r\n   */\n  const [shouldShowWords, setShouldShowWords] = useState(false);\n\n  /**\r\n   * Picks the next word to add to the list.\r\n   */\n\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance();\n  function CheckboxLabels() {\n    return /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          defaultChecked: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 34\n        }, this),\n        label: \"Show Words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 34\n        }, this),\n        label: \"Audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n  function pickNextWord() {\n    if (availableWords.size > 0) {\n      const word = pickElement(Array.from(availableWords));\n      availableWords.delete(word);\n      setAvailableWords(availableWords);\n      textToSpeech(word);\n      return word;\n    }\n  }\n  let helloWorld = 'Hello World';\n  function textToSpeech(helloWorld) {\n    utterance.text = helloWorld;\n    synth.speak(utterance);\n  }\n  //\n  // Callbacks\n  //\n\n  function startShowingWords() {\n    CheckboxLabels();\n    setNumRemaining(7);\n    setWords([pickNextWord()]);\n  }\n  function showNextWord() {\n    setWords(currentWords => [...currentWords, pickNextWord()]);\n    setNumRemaining(n => n - 1);\n  }\n  function resetEverything() {\n    setAvailableWords(new Set(masterList));\n    setShouldShowWords(false);\n    setWords([]);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      color: \"inherit\",\n      component: \"div\",\n      children: \"Working Memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), words.length === 0 && numRemaining === 0 ? /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: startShowingWords,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }, this) : numRemaining > 0 ? /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: showNextWord,\n      children: \"Next word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }, this) : !shouldShowWords ? /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setShouldShowWords(true),\n      children: \"Show answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: resetEverything,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }, this), numRemaining >= 0 && !shouldShowWords && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: words[words.length - 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 50\n    }, this), shouldShowWords && words.map(word => /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 47\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n} // END WorkingMemory\n_s(WorkingMemory, \"5DShp82WVt7tM21PQXiWb9bt9/k=\");\n_c = WorkingMemory;\nfunction pickElement(theArray) {\n  const index = pickIndex(theArray);\n  return theArray[index];\n}\nfunction pickIndex(theArray) {\n  return theArray.length > 0 ? Math.floor(Math.random() * theArray.length) : -1;\n}\nvar _c;\n$RefreshReg$(_c, \"WorkingMemory\");","map":{"version":3,"names":["useState","Button","Container","Typography","React","FormGroup","FormControlLabel","Checkbox","jsxDEV","_jsxDEV","appDef","id","label","component","WorkingMemory","masterList","params","_s","availableWords","setAvailableWords","Set","numRemaining","setNumRemaining","words","setWords","shouldShowWords","setShouldShowWords","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","CheckboxLabels","children","control","defaultChecked","fileName","_jsxFileName","lineNumber","columnNumber","pickNextWord","size","word","pickElement","Array","from","delete","textToSpeech","helloWorld","text","speak","startShowingWords","showNextWord","currentWords","n","resetEverything","variant","color","length","onClick","map","_c","theArray","index","pickIndex","Math","floor","random","$RefreshReg$"],"sources":["D:/Users/Joshua/GitHub/pub-001/react-01/src/app/apps/working-memory/WorkingMemory.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport * as React from 'react';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\nimport { AppDef, AppParams } from '../apps';\r\n\r\n\r\n\r\nconst appDef: AppDef = {\r\n    id: 'working-memory',\r\n    label: 'Working Memory',\r\n    component: WorkingMemory,\r\n}\r\nexport default appDef;\r\n\r\nconst masterList = [\r\n  'apple', 'eggs', 'elephant', 'trumpet', \r\n  'hammer', 'paper', 'sunflower',\r\n  'garlic', 'cheese', 'podcast', 'football',\r\n  'television' , 'speaker' , 'coffee' , 'glue', \r\n  'super cali fragile istic expiala doe shehs' ,\r\n];\r\n\r\nfunction WorkingMemory( params: AppParams ) {\r\n  /**\r\n   * The available words left for picking\r\n   */\r\n  const [ availableWords, setAvailableWords ] = useState<Set<string>>(new Set( masterList ) );\r\n\r\n  /**\r\n   * Number of words left to add to the list.\r\n   */\r\n  const [ numRemaining, setNumRemaining ] = useState<number>(0);\r\n\r\n  /**\r\n   * The words to remember\r\n   */\r\n  const [ words, setWords ] = useState<string[]>( [] );\r\n\r\n  /**\r\n   * Should show the whole list.\r\n   */\r\n  const [ shouldShowWords, setShouldShowWords ] = useState<boolean>( false );\r\n\r\n  /**\r\n   * Picks the next word to add to the list.\r\n   */\r\n\r\n  const synth = window.speechSynthesis;\r\n  const utterance = new SpeechSynthesisUtterance();\r\n\r\n\r\n\r\n  function CheckboxLabels() {\r\n  return (\r\n      <FormGroup>\r\n      <FormControlLabel control={<Checkbox defaultChecked />} label=\"Show Words\" />\r\n      <FormControlLabel control={<Checkbox />} label=\"Audio\" />\r\n    </FormGroup>\r\n  );\r\n}\r\n\r\n\r\n  function pickNextWord() {\r\n    if ( availableWords.size > 0 ) {\r\n      const word = pickElement( Array.from(availableWords) );\r\n      availableWords.delete( word );\r\n      setAvailableWords( availableWords );\r\n      textToSpeech(word);\r\n      return word;\r\n    }\r\n  }\r\n  let helloWorld = 'Hello World'\r\n  function textToSpeech(helloWorld: string) {\r\n    utterance.text = helloWorld;\r\n    synth.speak(utterance);\r\n  }  \r\n  //\r\n  // Callbacks\r\n  //\r\n\r\n  function startShowingWords() {\r\n    CheckboxLabels()\r\n    setNumRemaining(7);\r\n    setWords( [ pickNextWord() ] );\r\n  }\r\n\r\n  function showNextWord() {\r\n    setWords( currentWords => [ ...currentWords, pickNextWord() ] );\r\n    setNumRemaining( n => n - 1 );\r\n  }\r\n\r\n  function resetEverything() {\r\n    setAvailableWords( new Set( masterList ) );\r\n    setShouldShowWords( false );\r\n    setWords( [] );\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h2\" color=\"inherit\" component=\"div\">\r\n      Working Memory\r\n      </Typography>\r\n      {\r\n        words.length === 0 && numRemaining === 0 ?\r\n          <Button variant='contained' onClick={startShowingWords}>Start</Button>\r\n        : numRemaining > 0 ?\r\n          <Button variant='contained' onClick={showNextWord}>Next word</Button>\r\n        : !shouldShowWords ?\r\n          <Button variant='contained' onClick={ () => setShouldShowWords(true)}>Show answers</Button>\r\n        : <Button variant='contained' onClick={resetEverything}>Reset</Button>\r\n      }\r\n      {\r\n        numRemaining >= 0 && !shouldShowWords && <Typography variant=\"h4\">{words[ words.length - 1]}</Typography> \r\n      }\r\n      {\r\n        shouldShowWords && words.map( word => <Typography variant=\"h5\">{word}</Typography> )\r\n      }\r\n    </Container>\r\n  );\r\n} // END WorkingMemory\r\n\r\nfunction pickElement( theArray: Array<any> ) {\r\n  const index = pickIndex( theArray );\r\n  return theArray[ index ];\r\n}\r\n\r\nfunction pickIndex( theArray: Array<any> ) {\r\n  return theArray.length > 0 ? Math.floor( Math.random() * theArray.length ) : -1\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}