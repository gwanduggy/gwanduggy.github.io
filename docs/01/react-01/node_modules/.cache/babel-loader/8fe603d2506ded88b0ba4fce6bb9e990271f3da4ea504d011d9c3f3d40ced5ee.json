{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"pinnedColumns\", \"offsetTop\", \"offsetLeft\", \"dimensions\", \"renderContext\", \"focusedColumnIndex\", \"isFirstVisible\", \"isLastVisible\", \"isNotVisible\", \"focusedCell\", \"tabbableCell\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseOut\", \"onMouseOver\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { fastMemo } from '../utils/fastMemo';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnPositionsSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector, objectShallowCompare } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName, isEventTargetInPortal } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowMaximumTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../hooks/features/columnGrouping/gridColumnGroupsSelector';\nimport { gridEditRowsStateSelector } from '../hooks/features/editing/gridEditingSelectors';\nimport { PinnedPosition, gridPinnedColumnPositionLookup } from './cell/GridCell';\nimport { GridScrollbarFillerCell as ScrollbarFiller } from './GridScrollbarFillerCell';\nimport { getPinnedCellOffset } from '../internals/utils/getPinnedCellOffset';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isFirstVisible,\n    isLastVisible,\n    rowHeight,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isFirstVisible && 'row--firstVisible', isLastVisible && 'row--lastVisible', rowHeight === 'auto' && 'row--dynamicHeight']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction EmptyCell({\n  width\n}) {\n  if (!width) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(\"div\", {\n    role: \"presentation\",\n    className: clsx(gridClasses.cell, gridClasses.cellEmpty),\n    style: {\n      '--width': `${width}px`\n    }\n  });\n}\nconst GridRow = /*#__PURE__*/React.forwardRef(function GridRow(props, refProp) {\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      rowHeight,\n      className,\n      visibleColumns,\n      pinnedColumns,\n      offsetLeft,\n      dimensions,\n      renderContext,\n      focusedColumnIndex,\n      isFirstVisible,\n      isLastVisible,\n      isNotVisible,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseOut,\n      onMouseOver\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const handleRef = useForkRef(ref, refProp);\n  const rowNode = apiRef.current.getRowNode(rowId);\n  const scrollbarWidth = dimensions.hasScrollY ? dimensions.scrollbarSize : 0;\n  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;\n  const hasFocusCell = focusedColumnIndex !== undefined;\n  const hasVirtualFocusCellLeft = hasFocusCell && focusedColumnIndex >= pinnedColumns.left.length && focusedColumnIndex < renderContext.firstColumnIndex;\n  const hasVirtualFocusCellRight = hasFocusCell && focusedColumnIndex < visibleColumns.length - pinnedColumns.right.length && focusedColumnIndex >= renderContext.lastColumnIndex;\n  const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based\n\n  const ownerState = {\n    selected,\n    isFirstVisible,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row,\n    rowHeight\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if `paginationModel.pageSize=5` and `paginationModel.page=1`. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n      // pinned rows are not part of the visible rows\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell?.getAttribute('data-field');\n\n    // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      }\n\n      // User opened a detail panel\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      }\n\n      // User reorders a row\n      if (field === '__reorder__') {\n        return;\n      }\n\n      // User is editing a cell\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      }\n\n      // User clicked a button from the \"actions\" column type\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    disableColumnReorder\n  } = rootProps;\n  const rowReordering = rootProps.rowReordering;\n  const sizes = useGridSelector(apiRef, () => _extends({}, apiRef.current.unstable_getRowInternalSizes(rowId)), objectShallowCompare);\n  let minHeight = rowHeight;\n  if (minHeight === 'auto' && sizes) {\n    const numberOfBaseSizes = 1;\n    const maximumSize = sizes.baseCenter ?? 0;\n    if (maximumSize > 0 && numberOfBaseSizes > 1) {\n      minHeight = maximumSize;\n    }\n  }\n  const style = React.useMemo(() => {\n    if (isNotVisible) {\n      return {\n        opacity: 0,\n        width: 0,\n        height: 0\n      };\n    }\n    const rowStyle = _extends({}, styleProp, {\n      maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n      // max-height doesn't support \"auto\"\n      minHeight,\n      '--height': typeof rowHeight === 'number' ? `${rowHeight}px` : rowHeight\n    });\n    if (sizes?.spacingTop) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n      rowStyle[property] = sizes.spacingTop;\n    }\n    if (sizes?.spacingBottom) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n      let propertyValue = rowStyle[property];\n      // avoid overriding existing value\n      if (typeof propertyValue !== 'number') {\n        propertyValue = parseInt(propertyValue || '0', 10);\n      }\n      propertyValue += sizes.spacingBottom;\n      rowStyle[property] = propertyValue;\n    }\n    return rowStyle;\n  }, [isNotVisible, rowHeight, styleProp, minHeight, sizes, rootProps.rowSpacingType]);\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n  if (typeof rootProps.getRowClassName === 'function') {\n    const indexRelativeToCurrentPage = index - (currentPage.range?.firstRowIndex || 0);\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n  const getCell = (column, indexInSection, indexRelativeToAllColumns, sectionLength, pinnedPosition = PinnedPosition.NONE) => {\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo?.spannedByColSpan) {\n      return null;\n    }\n    const width = cellColSpanInfo?.cellProps.width ?? column.computedWidth;\n    const colSpan = cellColSpanInfo?.cellProps.colSpan ?? 1;\n    const pinnedOffset = getPinnedCellOffset(gridPinnedColumnPositionLookup[pinnedPosition], column.computedWidth, indexRelativeToAllColumns, columnPositions, dimensions);\n    if (rowNode?.type === 'skeletonRow') {\n      return /*#__PURE__*/_jsx(slots.skeletonCell, {\n        width: width,\n        height: rowHeight,\n        field: column.field,\n        align: column.align ?? 'left'\n      }, column.field);\n    }\n    const editCellState = editRowsState[rowId]?.[column.field] ?? null;\n\n    // when the cell is a reorder cell we are not allowing to reorder the col\n    // fixes https://github.com/mui/mui-x/issues/11126\n    const isReorderCell = column.field === '__reorder__';\n    const isEditingRows = Object.keys(editRowsState).length > 0;\n    const canReorderColumn = !(disableColumnReorder || column.disableReorder);\n    const canReorderRow = rowReordering && !sortModel.length && treeDepth <= 1 && !isEditingRows;\n    const disableDragEvents = !(canReorderColumn || isReorderCell && canReorderRow);\n    const cellIsNotVisible = pinnedPosition === PinnedPosition.VIRTUAL;\n    return /*#__PURE__*/_jsx(slots.cell, _extends({\n      column: column,\n      width: width,\n      rowId: rowId,\n      align: column.align || 'left',\n      colIndex: indexRelativeToAllColumns,\n      colSpan: colSpan,\n      disableDragEvents: disableDragEvents,\n      editCellState: editCellState,\n      isNotVisible: cellIsNotVisible,\n      pinnedOffset: pinnedOffset,\n      pinnedPosition: pinnedPosition,\n      sectionIndex: indexInSection,\n      sectionLength: sectionLength,\n      gridHasFiller: gridHasFiller\n    }, slotProps?.cell), column.field);\n  };\n\n  /* Start of rendering */\n\n  if (!rowNode) {\n    return null;\n  }\n  const leftCells = pinnedColumns.left.map((column, i) => {\n    const indexRelativeToAllColumns = i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.left.length, PinnedPosition.LEFT);\n  });\n  const rightCells = pinnedColumns.right.map((column, i) => {\n    const indexRelativeToAllColumns = visibleColumns.length - pinnedColumns.right.length + i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.right.length, PinnedPosition.RIGHT);\n  });\n  const middleColumnsLength = visibleColumns.length - pinnedColumns.left.length - pinnedColumns.right.length;\n  const cells = [];\n  if (hasVirtualFocusCellLeft) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedPosition.VIRTUAL));\n  }\n  for (let i = renderContext.firstColumnIndex; i < renderContext.lastColumnIndex; i += 1) {\n    const column = visibleColumns[i];\n    const indexInSection = i - pinnedColumns.left.length;\n    cells.push(getCell(column, indexInSection, i, middleColumnsLength));\n  }\n  if (hasVirtualFocusCellRight) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedPosition.VIRTUAL));\n  }\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave),\n    onMouseOut: publish('rowMouseOut', onMouseOut),\n    onMouseOver: publish('rowMouseOver', onMouseOver)\n  } : null;\n  const expandedWidth = dimensions.viewportOuterSize.width - dimensions.columnsTotalWidth - scrollbarWidth;\n  const emptyCellWidth = Math.max(0, expandedWidth);\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: handleRef,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style\n  }, eventHandlers, other, {\n    children: [leftCells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.cellOffsetLeft,\n      style: {\n        width: offsetLeft\n      }\n    }), cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    }), rightCells.length > 0 && /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.filler\n    }), rightCells, scrollbarWidth !== 0 && /*#__PURE__*/_jsx(ScrollbarFiller, {\n      pinnedRight: pinnedColumns.right.length > 0\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  dimensions: PropTypes.shape({\n    bottomContainerHeight: PropTypes.number.isRequired,\n    columnsTotalWidth: PropTypes.number.isRequired,\n    contentSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    hasScrollX: PropTypes.bool.isRequired,\n    hasScrollY: PropTypes.bool.isRequired,\n    headerFilterHeight: PropTypes.number.isRequired,\n    headerHeight: PropTypes.number.isRequired,\n    headersTotalHeight: PropTypes.number.isRequired,\n    isReady: PropTypes.bool.isRequired,\n    leftPinnedWidth: PropTypes.number.isRequired,\n    minimumSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    rightPinnedWidth: PropTypes.number.isRequired,\n    root: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    rowHeight: PropTypes.number.isRequired,\n    rowWidth: PropTypes.number.isRequired,\n    scrollbarSize: PropTypes.number.isRequired,\n    topContainerHeight: PropTypes.number.isRequired,\n    viewportInnerSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    viewportOuterSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired\n  }).isRequired,\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedColumnIndex: PropTypes.number,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isFirstVisible: PropTypes.bool.isRequired,\n  isLastVisible: PropTypes.bool.isRequired,\n  isNotVisible: PropTypes.bool.isRequired,\n  offsetLeft: PropTypes.number.isRequired,\n  offsetTop: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  pinnedColumns: PropTypes.object.isRequired,\n  renderContext: PropTypes.shape({\n    firstColumnIndex: PropTypes.number.isRequired,\n    firstRowIndex: PropTypes.number.isRequired,\n    lastColumnIndex: PropTypes.number.isRequired,\n    lastRowIndex: PropTypes.number.isRequired\n  }).isRequired,\n  row: PropTypes.object.isRequired,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  selected: PropTypes.bool.isRequired,\n  /**\n   * Determines which cell should be tabbable by having tabIndex=0.\n   * If `null`, no cell in this row is in the tab sequence.\n   */\n  tabbableCell: PropTypes.string,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nconst MemoizedGridRow = fastMemo(GridRow);\nexport { MemoizedGridRow as GridRow };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_composeClasses","composeClasses","unstable_useForkRef","useForkRef","fastMemo","GridEditModes","GridRowModes","GridCellModes","useGridApiContext","getDataGridUtilityClass","gridClasses","useGridRootProps","gridColumnPositionsSelector","useGridSelector","objectShallowCompare","useGridVisibleRows","findParentElementFromClassName","isEventTargetInPortal","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridSortModelSelector","gridRowMaximumTreeDepthSelector","gridColumnGroupsHeaderMaxDepthSelector","gridEditRowsStateSelector","PinnedPosition","gridPinnedColumnPositionLookup","GridScrollbarFillerCell","ScrollbarFiller","getPinnedCellOffset","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","editable","editing","selected","isFirstVisible","isLastVisible","rowHeight","classes","slots","root","EmptyCell","width","role","className","cell","cellEmpty","style","GridRow","forwardRef","props","refProp","rowId","row","index","styleProp","visibleColumns","pinnedColumns","offsetLeft","dimensions","renderContext","focusedColumnIndex","isNotVisible","onClick","onDoubleClick","onMouseEnter","onMouseLeave","onMouseOut","onMouseOver","other","apiRef","ref","useRef","rootProps","currentPage","sortModel","treeDepth","headerGroupingMaxDepth","columnPositions","editRowsState","handleRef","rowNode","current","getRowNode","scrollbarWidth","hasScrollY","scrollbarSize","gridHasFiller","columnsTotalWidth","viewportOuterSize","hasFocusCell","undefined","hasVirtualFocusCellLeft","left","length","firstColumnIndex","hasVirtualFocusCellRight","right","lastColumnIndex","ariaRowIndex","getRowMode","Edit","editMode","Row","useLayoutEffect","range","rowIndex","getRowIndexRelativeToVisibleRows","unstable_setLastMeasuredRowIndex","rootElement","hasFixedHeight","ResizeObserver","resizeObserver","entries","entry","height","borderBoxSize","blockSize","contentRect","unstable_storeRowHeightMeasurement","observe","disconnect","publish","useCallback","eventName","propHandler","event","getRow","publishEvent","getRowParams","publishClick","target","field","getAttribute","getCellMode","column","getColumn","type","slotProps","disableColumnReorder","rowReordering","sizes","unstable_getRowInternalSizes","minHeight","numberOfBaseSizes","maximumSize","baseCenter","useMemo","opacity","rowStyle","maxHeight","spacingTop","property","rowSpacingType","spacingBottom","propertyValue","parseInt","rowClassNames","unstable_applyPipeProcessors","getRowClassName","indexRelativeToCurrentPage","firstRowIndex","rowParams","rows","push","getCell","indexInSection","indexRelativeToAllColumns","sectionLength","pinnedPosition","NONE","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","cellProps","computedWidth","colSpan","pinnedOffset","skeletonCell","align","editCellState","isReorderCell","isEditingRows","Object","keys","canReorderColumn","disableReorder","canReorderRow","disableDragEvents","cellIsNotVisible","VIRTUAL","colIndex","sectionIndex","leftCells","map","i","LEFT","rightCells","RIGHT","middleColumnsLength","cells","eventHandlers","expandedWidth","emptyCellWidth","Math","max","children","cellOffsetLeft","filler","pinnedRight","process","env","NODE_ENV","propTypes","shape","bottomContainerHeight","number","isRequired","contentSize","hasScrollX","bool","headerFilterHeight","headerHeight","headersTotalHeight","isReady","leftPinnedWidth","minimumSize","rightPinnedWidth","rowWidth","topContainerHeight","viewportInnerSize","offsetTop","func","object","lastRowIndex","oneOfType","oneOf","string","tabbableCell","arrayOf","MemoizedGridRow"],"sources":["D:/Users/Joshua/GitHub/pub-001/node_modules/@mui/x-data-grid/components/GridRow.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"pinnedColumns\", \"offsetTop\", \"offsetLeft\", \"dimensions\", \"renderContext\", \"focusedColumnIndex\", \"isFirstVisible\", \"isLastVisible\", \"isNotVisible\", \"focusedCell\", \"tabbableCell\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseOut\", \"onMouseOver\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { fastMemo } from '../utils/fastMemo';\nimport { GridEditModes, GridRowModes, GridCellModes } from '../models/gridEditRowModel';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass, gridClasses } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridColumnPositionsSelector } from '../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector, objectShallowCompare } from '../hooks/utils/useGridSelector';\nimport { useGridVisibleRows } from '../hooks/utils/useGridVisibleRows';\nimport { findParentElementFromClassName, isEventTargetInPortal } from '../utils/domUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../colDef/gridCheckboxSelectionColDef';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../colDef/gridActionsColDef';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../constants/gridDetailPanelToggleField';\nimport { gridSortModelSelector } from '../hooks/features/sorting/gridSortingSelector';\nimport { gridRowMaximumTreeDepthSelector } from '../hooks/features/rows/gridRowsSelector';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../hooks/features/columnGrouping/gridColumnGroupsSelector';\nimport { gridEditRowsStateSelector } from '../hooks/features/editing/gridEditingSelectors';\nimport { PinnedPosition, gridPinnedColumnPositionLookup } from './cell/GridCell';\nimport { GridScrollbarFillerCell as ScrollbarFiller } from './GridScrollbarFillerCell';\nimport { getPinnedCellOffset } from '../internals/utils/getPinnedCellOffset';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    editable,\n    editing,\n    selected,\n    isFirstVisible,\n    isLastVisible,\n    rowHeight,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isFirstVisible && 'row--firstVisible', isLastVisible && 'row--lastVisible', rowHeight === 'auto' && 'row--dynamicHeight']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction EmptyCell({\n  width\n}) {\n  if (!width) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(\"div\", {\n    role: \"presentation\",\n    className: clsx(gridClasses.cell, gridClasses.cellEmpty),\n    style: {\n      '--width': `${width}px`\n    }\n  });\n}\nconst GridRow = /*#__PURE__*/React.forwardRef(function GridRow(props, refProp) {\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      rowHeight,\n      className,\n      visibleColumns,\n      pinnedColumns,\n      offsetLeft,\n      dimensions,\n      renderContext,\n      focusedColumnIndex,\n      isFirstVisible,\n      isLastVisible,\n      isNotVisible,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseOut,\n      onMouseOver\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const handleRef = useForkRef(ref, refProp);\n  const rowNode = apiRef.current.getRowNode(rowId);\n  const scrollbarWidth = dimensions.hasScrollY ? dimensions.scrollbarSize : 0;\n  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;\n  const hasFocusCell = focusedColumnIndex !== undefined;\n  const hasVirtualFocusCellLeft = hasFocusCell && focusedColumnIndex >= pinnedColumns.left.length && focusedColumnIndex < renderContext.firstColumnIndex;\n  const hasVirtualFocusCellRight = hasFocusCell && focusedColumnIndex < visibleColumns.length - pinnedColumns.right.length && focusedColumnIndex >= renderContext.lastColumnIndex;\n  const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based\n\n  const ownerState = {\n    selected,\n    isFirstVisible,\n    isLastVisible,\n    classes: rootProps.classes,\n    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,\n    editable: rootProps.editMode === GridEditModes.Row,\n    rowHeight\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      // The index prop is relative to the rows from all pages. As example, the index prop of the\n      // first row is 5 if `paginationModel.pageSize=5` and `paginationModel.page=1`. However, the index used by the virtualization\n      // doesn't care about pagination and considers the rows from the current page only, so the\n      // first row always has index=0. We need to subtract the index of the first row to make it\n      // compatible with the index used by the virtualization.\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n      // pinned rows are not part of the visible rows\n      if (rowIndex != null) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    const rootElement = ref.current;\n    const hasFixedHeight = rowHeight !== 'auto';\n    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n    const resizeObserver = new ResizeObserver(entries => {\n      const [entry] = entries;\n      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;\n      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height);\n    });\n    resizeObserver.observe(rootElement);\n    return () => resizeObserver.disconnect();\n  }, [apiRef, currentPage.range, index, rowHeight, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell?.getAttribute('data-field');\n\n    // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      }\n\n      // User opened a detail panel\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      }\n\n      // User reorders a row\n      if (field === '__reorder__') {\n        return;\n      }\n\n      // User is editing a cell\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      }\n\n      // User clicked a button from the \"actions\" column type\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    disableColumnReorder\n  } = rootProps;\n  const rowReordering = rootProps.rowReordering;\n  const sizes = useGridSelector(apiRef, () => _extends({}, apiRef.current.unstable_getRowInternalSizes(rowId)), objectShallowCompare);\n  let minHeight = rowHeight;\n  if (minHeight === 'auto' && sizes) {\n    const numberOfBaseSizes = 1;\n    const maximumSize = sizes.baseCenter ?? 0;\n    if (maximumSize > 0 && numberOfBaseSizes > 1) {\n      minHeight = maximumSize;\n    }\n  }\n  const style = React.useMemo(() => {\n    if (isNotVisible) {\n      return {\n        opacity: 0,\n        width: 0,\n        height: 0\n      };\n    }\n    const rowStyle = _extends({}, styleProp, {\n      maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n      // max-height doesn't support \"auto\"\n      minHeight,\n      '--height': typeof rowHeight === 'number' ? `${rowHeight}px` : rowHeight\n    });\n    if (sizes?.spacingTop) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n      rowStyle[property] = sizes.spacingTop;\n    }\n    if (sizes?.spacingBottom) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n      let propertyValue = rowStyle[property];\n      // avoid overriding existing value\n      if (typeof propertyValue !== 'number') {\n        propertyValue = parseInt(propertyValue || '0', 10);\n      }\n      propertyValue += sizes.spacingBottom;\n      rowStyle[property] = propertyValue;\n    }\n    return rowStyle;\n  }, [isNotVisible, rowHeight, styleProp, minHeight, sizes, rootProps.rowSpacingType]);\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n  if (typeof rootProps.getRowClassName === 'function') {\n    const indexRelativeToCurrentPage = index - (currentPage.range?.firstRowIndex || 0);\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n  const getCell = (column, indexInSection, indexRelativeToAllColumns, sectionLength, pinnedPosition = PinnedPosition.NONE) => {\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo?.spannedByColSpan) {\n      return null;\n    }\n    const width = cellColSpanInfo?.cellProps.width ?? column.computedWidth;\n    const colSpan = cellColSpanInfo?.cellProps.colSpan ?? 1;\n    const pinnedOffset = getPinnedCellOffset(gridPinnedColumnPositionLookup[pinnedPosition], column.computedWidth, indexRelativeToAllColumns, columnPositions, dimensions);\n    if (rowNode?.type === 'skeletonRow') {\n      return /*#__PURE__*/_jsx(slots.skeletonCell, {\n        width: width,\n        height: rowHeight,\n        field: column.field,\n        align: column.align ?? 'left'\n      }, column.field);\n    }\n    const editCellState = editRowsState[rowId]?.[column.field] ?? null;\n\n    // when the cell is a reorder cell we are not allowing to reorder the col\n    // fixes https://github.com/mui/mui-x/issues/11126\n    const isReorderCell = column.field === '__reorder__';\n    const isEditingRows = Object.keys(editRowsState).length > 0;\n    const canReorderColumn = !(disableColumnReorder || column.disableReorder);\n    const canReorderRow = rowReordering && !sortModel.length && treeDepth <= 1 && !isEditingRows;\n    const disableDragEvents = !(canReorderColumn || isReorderCell && canReorderRow);\n    const cellIsNotVisible = pinnedPosition === PinnedPosition.VIRTUAL;\n    return /*#__PURE__*/_jsx(slots.cell, _extends({\n      column: column,\n      width: width,\n      rowId: rowId,\n      align: column.align || 'left',\n      colIndex: indexRelativeToAllColumns,\n      colSpan: colSpan,\n      disableDragEvents: disableDragEvents,\n      editCellState: editCellState,\n      isNotVisible: cellIsNotVisible,\n      pinnedOffset: pinnedOffset,\n      pinnedPosition: pinnedPosition,\n      sectionIndex: indexInSection,\n      sectionLength: sectionLength,\n      gridHasFiller: gridHasFiller\n    }, slotProps?.cell), column.field);\n  };\n\n  /* Start of rendering */\n\n  if (!rowNode) {\n    return null;\n  }\n  const leftCells = pinnedColumns.left.map((column, i) => {\n    const indexRelativeToAllColumns = i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.left.length, PinnedPosition.LEFT);\n  });\n  const rightCells = pinnedColumns.right.map((column, i) => {\n    const indexRelativeToAllColumns = visibleColumns.length - pinnedColumns.right.length + i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.right.length, PinnedPosition.RIGHT);\n  });\n  const middleColumnsLength = visibleColumns.length - pinnedColumns.left.length - pinnedColumns.right.length;\n  const cells = [];\n  if (hasVirtualFocusCellLeft) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedPosition.VIRTUAL));\n  }\n  for (let i = renderContext.firstColumnIndex; i < renderContext.lastColumnIndex; i += 1) {\n    const column = visibleColumns[i];\n    const indexInSection = i - pinnedColumns.left.length;\n    cells.push(getCell(column, indexInSection, i, middleColumnsLength));\n  }\n  if (hasVirtualFocusCellRight) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedPosition.VIRTUAL));\n  }\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave),\n    onMouseOut: publish('rowMouseOut', onMouseOut),\n    onMouseOver: publish('rowMouseOver', onMouseOver)\n  } : null;\n  const expandedWidth = dimensions.viewportOuterSize.width - dimensions.columnsTotalWidth - scrollbarWidth;\n  const emptyCellWidth = Math.max(0, expandedWidth);\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    ref: handleRef,\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": selected,\n    style: style\n  }, eventHandlers, other, {\n    children: [leftCells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.cellOffsetLeft,\n      style: {\n        width: offsetLeft\n      }\n    }), cells, emptyCellWidth > 0 && /*#__PURE__*/_jsx(EmptyCell, {\n      width: emptyCellWidth\n    }), rightCells.length > 0 && /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.filler\n    }), rightCells, scrollbarWidth !== 0 && /*#__PURE__*/_jsx(ScrollbarFiller, {\n      pinnedRight: pinnedColumns.right.length > 0\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  dimensions: PropTypes.shape({\n    bottomContainerHeight: PropTypes.number.isRequired,\n    columnsTotalWidth: PropTypes.number.isRequired,\n    contentSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    hasScrollX: PropTypes.bool.isRequired,\n    hasScrollY: PropTypes.bool.isRequired,\n    headerFilterHeight: PropTypes.number.isRequired,\n    headerHeight: PropTypes.number.isRequired,\n    headersTotalHeight: PropTypes.number.isRequired,\n    isReady: PropTypes.bool.isRequired,\n    leftPinnedWidth: PropTypes.number.isRequired,\n    minimumSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    rightPinnedWidth: PropTypes.number.isRequired,\n    root: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    rowHeight: PropTypes.number.isRequired,\n    rowWidth: PropTypes.number.isRequired,\n    scrollbarSize: PropTypes.number.isRequired,\n    topContainerHeight: PropTypes.number.isRequired,\n    viewportInnerSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired,\n    viewportOuterSize: PropTypes.shape({\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired\n    }).isRequired\n  }).isRequired,\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedColumnIndex: PropTypes.number,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isFirstVisible: PropTypes.bool.isRequired,\n  isLastVisible: PropTypes.bool.isRequired,\n  isNotVisible: PropTypes.bool.isRequired,\n  offsetLeft: PropTypes.number.isRequired,\n  offsetTop: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  pinnedColumns: PropTypes.object.isRequired,\n  renderContext: PropTypes.shape({\n    firstColumnIndex: PropTypes.number.isRequired,\n    firstRowIndex: PropTypes.number.isRequired,\n    lastColumnIndex: PropTypes.number.isRequired,\n    lastRowIndex: PropTypes.number.isRequired\n  }).isRequired,\n  row: PropTypes.object.isRequired,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  selected: PropTypes.bool.isRequired,\n  /**\n   * Determines which cell should be tabbable by having tabIndex=0.\n   * If `null`, no cell in this row is in the tab sequence.\n   */\n  tabbableCell: PropTypes.string,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nconst MemoizedGridRow = fastMemo(GridRow);\nexport { MemoizedGridRow as GridRow };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}