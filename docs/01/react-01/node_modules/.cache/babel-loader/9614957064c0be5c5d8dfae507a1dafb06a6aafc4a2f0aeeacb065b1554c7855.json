{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Joshua\\\\GitHub\\\\pub-001\\\\react-01\\\\src\\\\app\\\\apps\\\\working-memory\\\\WorkingMemory.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst appDef = {\n  id: 'working-memory',\n  label: 'Working Memory',\n  component: WorkingMemory\n};\nexport default appDef;\nconst masterList = ['apple', 'eggs', 'elephant', 'trumpet', 'hammer', 'paper', 'sunflower', 'garlic', 'cheese', 'podcast', 'football', 'television', 'speaker', 'coffee', 'glue', 'super cali fragile istic expiala doe shehs'];\nfunction WorkingMemory(params) {\n  _s();\n  /**\r\n   * The available words left for picking\r\n   */\n  const [availableWords, setAvailableWords] = useState(new Set(masterList));\n\n  /**\r\n   * Number of words left to add to the list.\r\n   */\n  const [numRemaining, setNumRemaining] = useState(0);\n\n  /**\r\n   * The words to remember\r\n   */\n  const [words, setWords] = useState([]);\n\n  /**\r\n   * Should show the whole list.\r\n   */\n  const [shouldShowWords, setShouldShowWords] = useState(false);\n\n  /**\r\n   * The available words left for picking\r\n   */\n  const [text, setText] = useState('pikachu');\n\n  /**\r\n   * Picks the next word to add to the list.\r\n   */\n\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance();\n  function pickNextWord() {\n    if (availableWords.size > 0) {\n      const word = pickElement(Array.from(availableWords));\n      availableWords.delete(word);\n      setAvailableWords(availableWords);\n      textToSpeech(word);\n      return word;\n    }\n  }\n  function textToSpeech(helloWorld) {\n    utterance.text = helloWorld;\n    synth.speak(utterance);\n  }\n  fetch(\"pokeapi.co/api/v2/pokemon/ditto\").then(response => response.json()).then(data => {\n    console.log(data);\n  });\n  //\n  // Callbacks\n  //\n\n  function startShowingWords() {\n    setNumRemaining(7);\n    setWords([pickNextWord()]);\n  }\n  function showNextWord() {\n    setWords(currentWords => [...currentWords, pickNextWord()]);\n    setNumRemaining(n => n - 1);\n  }\n  function resetEverything() {\n    setAvailableWords(new Set(masterList));\n    setShouldShowWords(false);\n    setWords([]);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      color: \"inherit\",\n      component: \"div\",\n      children: \"Working Memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), words.length === 0 && numRemaining === 0 ? /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: startShowingWords,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }, this) : numRemaining > 0 ? /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: showNextWord,\n      children: \"Next word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }, this) : !shouldShowWords ? /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => setShouldShowWords(true),\n      children: \"Show answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: resetEverything,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this), numRemaining >= 0 && !shouldShowWords && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: words[words.length - 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 50\n    }, this), shouldShowWords && words.map(word => /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 47\n    }, this)), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"standard-basic\",\n      label: \"Standard\",\n      value: text,\n      onChange: event => console.log(event),\n      variant: \"standard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n} // END WorkingMemory\n_s(WorkingMemory, \"8zVCYYvPbG9FOmH3Xn5dXr4QpTI=\");\n_c = WorkingMemory;\nfunction pickElement(theArray) {\n  const index = pickIndex(theArray);\n  return theArray[index];\n}\nfunction pickIndex(theArray) {\n  return theArray.length > 0 ? Math.floor(Math.random() * theArray.length) : -1;\n}\nvar _c;\n$RefreshReg$(_c, \"WorkingMemory\");","map":{"version":3,"names":["useState","Button","Container","Typography","React","TextField","jsxDEV","_jsxDEV","appDef","id","label","component","WorkingMemory","masterList","params","_s","availableWords","setAvailableWords","Set","numRemaining","setNumRemaining","words","setWords","shouldShowWords","setShouldShowWords","text","setText","synth","window","speechSynthesis","utterance","SpeechSynthesisUtterance","pickNextWord","size","word","pickElement","Array","from","delete","textToSpeech","helloWorld","speak","fetch","then","response","json","data","console","log","startShowingWords","showNextWord","currentWords","n","resetEverything","children","variant","color","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","map","value","onChange","event","_c","theArray","index","pickIndex","Math","floor","random","$RefreshReg$"],"sources":["D:/Users/Joshua/GitHub/pub-001/react-01/src/app/apps/working-memory/WorkingMemory.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport * as React from 'react';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { AppDef, AppParams } from '../apps';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\n\r\n\r\nconst appDef: AppDef = {\r\n    id: 'working-memory',\r\n    label: 'Working Memory',\r\n    component: WorkingMemory,\r\n}\r\nexport default appDef;\r\n\r\nconst masterList = [\r\n  'apple', 'eggs', 'elephant', 'trumpet', \r\n  'hammer', 'paper', 'sunflower',\r\n  'garlic', 'cheese', 'podcast', 'football',\r\n  'television' , 'speaker' , 'coffee' , 'glue', \r\n  'super cali fragile istic expiala doe shehs' ,\r\n];\r\n\r\nfunction WorkingMemory( params: AppParams ) {\r\n  /**\r\n   * The available words left for picking\r\n   */\r\n  const [ availableWords, setAvailableWords ] = useState<Set<string>>(new Set( masterList ) );\r\n\r\n  /**\r\n   * Number of words left to add to the list.\r\n   */\r\n  const [ numRemaining, setNumRemaining ] = useState<number>(0);\r\n\r\n  /**\r\n   * The words to remember\r\n   */\r\n  const [ words, setWords ] = useState<string[]>( [] );\r\n\r\n  /**\r\n   * Should show the whole list.\r\n   */\r\n  const [ shouldShowWords, setShouldShowWords ] = useState<boolean>( false );\r\n\r\n  /**\r\n   * The available words left for picking\r\n   */\r\n  const [ text, setText ] = useState<string>('pikachu' );\r\n\r\n  /**\r\n   * Picks the next word to add to the list.\r\n   */\r\n\r\n  const synth = window.speechSynthesis;\r\n  const utterance = new SpeechSynthesisUtterance();\r\n  \r\n\r\n\r\n  function pickNextWord() {\r\n    if ( availableWords.size > 0 ) {\r\n      const word = pickElement( Array.from(availableWords) );\r\n      availableWords.delete( word );\r\n      setAvailableWords( availableWords );\r\n      textToSpeech(word);\r\n      return word;\r\n    }\r\n  }\r\n  function textToSpeech(helloWorld: string) {\r\n    utterance.text = helloWorld;\r\n    synth.speak(utterance);\r\n  }  \r\n\r\n  fetch (\"pokeapi.co/api/v2/pokemon/ditto\")\r\n  .then(response => response.json()) \r\n  .then(data => {\r\n    console.log(data); \r\n  })\r\n  //\r\n  // Callbacks\r\n  //\r\n\r\n  function startShowingWords() {\r\n\r\n    setNumRemaining(7);\r\n    setWords( [ pickNextWord() ] );\r\n  }\r\n\r\n  function showNextWord() {\r\n    setWords( currentWords => [ ...currentWords, pickNextWord() ] );\r\n    setNumRemaining( n => n - 1 );\r\n  }\r\n\r\n  function resetEverything() {\r\n    setAvailableWords( new Set( masterList ) );\r\n    setShouldShowWords( false );\r\n    setWords( [] );\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h2\" color=\"inherit\" component=\"div\">\r\n      Working Memory\r\n      </Typography>\r\n      {\r\n        words.length === 0 && numRemaining === 0 ?\r\n          <Button variant='contained' onClick={startShowingWords}>Start</Button>\r\n        : numRemaining > 0 ?\r\n          <Button variant='contained' onClick={showNextWord}>Next word</Button>\r\n        : !shouldShowWords ?\r\n          <Button variant='contained' onClick={ () => setShouldShowWords(true)}>Show answers</Button>\r\n        : <Button variant='contained' onClick={resetEverything}>Reset</Button>\r\n      }\r\n      {\r\n        numRemaining >= 0 && !shouldShowWords && <Typography variant=\"h4\">{words[ words.length - 1]}</Typography> \r\n      }\r\n      {\r\n        shouldShowWords && words.map( word => <Typography variant=\"h5\">{word}</Typography> )\r\n      }\r\n       <TextField id=\"standard-basic\" label=\"Standard\" value={text} onChange={event => console.log( event )} variant=\"standard\" />\r\n    </Container>\r\n  );\r\n} // END WorkingMemory\r\n\r\nfunction pickElement( theArray: Array<any> ) {\r\n  const index = pickIndex( theArray );\r\n  return theArray[ index ];\r\n}\r\n\r\nfunction pickIndex( theArray: Array<any> ) {\r\n  return theArray.length > 0 ? Math.floor( Math.random() * theArray.length ) : -1\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}