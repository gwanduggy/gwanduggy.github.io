{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowGroupingNameSelector, gridRowTreeDepthsSelector, gridDataRowIdsSelector, gridRowsDataRowIdToIdLookupSelector, gridRowMaximumTreeDepthSelector } from './gridRowsSelector';\nimport { useTimeout } from '../../utils/useTimeout';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, isAutoGeneratedRow, GRID_ROOT_GROUP_ID, GRID_ID_AUTOGENERATED, updateCacheWithNewRows, getTopLevelRowCount, getRowIdFromRowModel } from './gridRowsUtils';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.rows = createRowsInternalCache({\n    rows: props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {\n      // Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const lastUpdateMs = React.useRef(Date.now());\n  const lastRowCount = React.useRef(props.rowCount);\n  const timeout = useTimeout();\n  const getRow = React.useCallback(id => {\n    const model = gridRowsLookupSelector(apiRef)[id];\n    if (model) {\n      return model;\n    }\n    const node = apiRef.current.getRowNode(id);\n    if (node && isAutoGeneratedRow(node)) {\n      return {\n        [GRID_ID_AUTOGENERATED]: id\n      };\n    }\n    return null;\n  }, [apiRef]);\n  const getRowIdProp = props.getRowId;\n  const getRowId = React.useCallback(row => {\n    if (GRID_ID_AUTOGENERATED in row) {\n      return row[GRID_ID_AUTOGENERATED];\n    }\n    if (getRowIdProp) {\n      return getRowIdProp(row);\n    }\n    return row.id;\n  }, [getRowIdProp]);\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, _ref, index) => {\n    let {\n      id\n    } = _ref;\n    acc[id] = index;\n    return acc;\n  }, {}), [currentPage.rows]);\n  const throttledRowsChange = React.useCallback(_ref2 => {\n    let {\n      cache,\n      throttle\n    } = _ref2;\n    const run = () => {\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading,\n          previousTree: gridRowTreeSelector(apiRef),\n          previousTreeDepths: gridRowTreeDepthsSelector(apiRef)\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n    timeout.clear();\n    apiRef.current.caches.rows = cache;\n    if (!throttle) {\n      run();\n      return;\n    }\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n    if (throttleRemainingTimeMs > 0) {\n      timeout.start(throttleRemainingTimeMs, run);\n      return;\n    }\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef, timeout]);\n\n  /**\n   * API METHODS\n   */\n  const setRows = React.useCallback(rows => {\n    logger.debug(\"Updating all rows, new length \".concat(rows.length));\n    const cache = createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      throw new Error(['MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    const nonPinnedRowsUpdates = [];\n    updates.forEach(update => {\n      const id = getRowIdFromRowModel(update, props.getRowId, 'A row was provided without id when calling updateRows():');\n      const rowNode = apiRef.current.getRowNode(id);\n      if ((rowNode === null || rowNode === void 0 ? void 0 : rowNode.type) === 'pinnedRow') {\n        // @ts-ignore because otherwise `release:build` doesn't work\n        const pinnedRowsCache = apiRef.current.caches.pinnedRows;\n        const prevModel = pinnedRowsCache.idLookup[id];\n        if (prevModel) {\n          pinnedRowsCache.idLookup[id] = _extends({}, prevModel, update);\n        }\n      } else {\n        nonPinnedRowsUpdates.push(update);\n      }\n    });\n    const cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const getRowModels = React.useCallback(() => {\n    const dataRows = gridDataRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(dataRows.map(id => {\n      var _idRowsLookup$id;\n      return [id, (_idRowsLookup$id = idRowsLookup[id]) !== null && _idRowsLookup$id !== void 0 ? _idRowsLookup$id : {}];\n    }));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = apiRef.current.getRowNode(id);\n    if (!currentNode) {\n      throw new Error(\"MUI X: No row with id #\".concat(id, \" found.\"));\n    }\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI X: Only group nodes can be expanded or collapsed.');\n    }\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => {\n    var _gridRowTreeSelector$;\n    return (_gridRowTreeSelector$ = gridRowTreeSelector(apiRef)[id]) !== null && _gridRowTreeSelector$ !== void 0 ? _gridRowTreeSelector$ : null;\n  }, [apiRef]);\n  const getRowGroupChildren = React.useCallback(_ref3 => {\n    let {\n      skipAutoGeneratedRows = true,\n      groupId,\n      applySorting,\n      applyFiltering\n    } = _ref3;\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n    if (applySorting) {\n      const groupNode = tree[groupId];\n      if (!groupNode) {\n        return [];\n      }\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const node = apiRef.current.getRowNode(rowId);\n    if (!node) {\n      throw new Error(\"MUI X: No row with id #\".concat(rowId, \" found.\"));\n    }\n    if (node.parent !== GRID_ROOT_GROUP_ID) {\n      throw new Error(\"MUI X: The row reordering do not support reordering of grouped rows yet.\");\n    }\n    if (node.type !== 'leaf') {\n      throw new Error(\"MUI X: The row reordering do not support reordering of footer or grouping rows.\");\n    }\n    apiRef.current.setState(state => {\n      const group = gridRowTreeSelector(state, apiRef.current.instanceId)[GRID_ROOT_GROUP_ID];\n      const allRows = group.children;\n      const oldIndex = allRows.findIndex(row => row === rowId);\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n      logger.debug(\"Moving row \".concat(rowId, \" to index \").concat(targetIndex));\n      const updatedRows = [...allRows];\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [GRID_ROOT_GROUP_ID]: _extends({}, group, {\n              children: updatedRows\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error(['MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (newRows.length === 0) {\n      return;\n    }\n    const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n    const tree = _extends({}, gridRowTreeSelector(apiRef));\n    const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));\n    const dataRowIdToIdLookup = _extends({}, gridRowsDataRowIdToIdLookupSelector(apiRef));\n    const rootGroup = tree[GRID_ROOT_GROUP_ID];\n    const rootGroupChildren = [...rootGroup.children];\n    const seenIds = new Set();\n    for (let i = 0; i < newRows.length; i += 1) {\n      const rowModel = newRows[i];\n      const rowId = getRowIdFromRowModel(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);\n      if (!seenIds.has(removedRowId)) {\n        delete dataRowIdToModelLookup[removedRowId];\n        delete dataRowIdToIdLookup[removedRowId];\n        delete tree[removedRowId];\n      }\n      const rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      dataRowIdToIdLookup[rowId] = rowId;\n      tree[rowId] = rowTreeNodeConfig;\n      seenIds.add(rowId);\n    }\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    });\n\n    // Removes potential remaining skeleton rows from the dataRowIds.\n    const dataRowIds = rootGroupChildren.filter(childId => {\n      var _tree$childId;\n      return ((_tree$childId = tree[childId]) === null || _tree$childId === void 0 ? void 0 : _tree$childId.type) === 'leaf';\n    });\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        dataRowIdToModelLookup,\n        dataRowIdToIdLookup,\n        dataRowIds,\n        tree\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId]);\n  const rowApi = {\n    getRow,\n    getRowId,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    updateRows,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  const rowProApi = {\n    setRowIndex,\n    setRowChildrenExpansion,\n    getRowGroupChildren\n  };\n\n  /**\n   * EVENTS\n   */\n  const groupRows = React.useCallback(() => {\n    logger.info(\"Row grouping pre-processing have changed, regenerating the row tree\");\n    let cache;\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = _extends({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: gridDataRowIdsSelector(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n\n  /**\n   * APPLIERS\n   */\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: gridRowTreeSelector(state, apiRef.current.instanceId),\n        treeDepths: gridRowTreeDepthsSelector(state, apiRef.current.instanceId),\n        dataRowIds: gridDataRowIdsSelector(state, apiRef.current.instanceId),\n        dataRowIdToModelLookup: gridRowsLookupSelector(state, apiRef.current.instanceId),\n        dataRowIdToIdLookup: gridRowsDataRowIdToIdLookupSelector(state, apiRef.current.instanceId)\n      });\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, response, {\n          totalTopLevelRowCount: getTopLevelRowCount({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.rowCount]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'public');\n  useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    let isRowCountPropUpdated = false;\n    if (props.rowCount !== lastRowCount.current) {\n      isRowCountPropUpdated = true;\n      lastRowCount.current = props.rowCount;\n    }\n    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows;\n    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;\n\n    // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n        apiRef.current.forceUpdate();\n      }\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n        apiRef.current.forceUpdate();\n      }\n      if (!isRowCountPropUpdated) {\n        return;\n      }\n    }\n    logger.debug(\"Updating all rows, new length \".concat(props.rows.length));\n    throttledRowsChange({\n      cache: createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridRowCountSelector","gridRowsLookupSelector","gridRowTreeSelector","gridRowGroupingNameSelector","gridRowTreeDepthsSelector","gridDataRowIdsSelector","gridRowsDataRowIdToIdLookupSelector","gridRowMaximumTreeDepthSelector","useTimeout","GridSignature","useGridApiEventHandler","useGridVisibleRows","gridSortedRowIdsSelector","gridFilteredRowsLookupSelector","getTreeNodeDescendants","createRowsInternalCache","getRowsStateFromCache","isAutoGeneratedRow","GRID_ROOT_GROUP_ID","GRID_ID_AUTOGENERATED","updateCacheWithNewRows","getTopLevelRowCount","getRowIdFromRowModel","useGridRegisterPipeApplier","rowsStateInitializer","state","props","apiRef","current","caches","rows","getRowId","loading","rowCount","rowCountProp","loadingProp","previousTree","previousTreeDepths","useGridRows","process","env","NODE_ENV","Object","freeze","error","logger","currentPage","lastUpdateMs","useRef","Date","now","lastRowCount","timeout","getRow","useCallback","id","model","node","getRowNode","getRowIdProp","row","lookup","useMemo","reduce","acc","_ref","index","throttledRowsChange","_ref2","cache","throttle","run","setState","publishEvent","forceUpdate","clear","throttleRemainingTimeMs","throttleRowsMs","start","setRows","debug","concat","length","prevCache","rowsBeforePartialUpdates","updateRows","updates","signature","DataGrid","Error","join","nonPinnedRowsUpdates","forEach","update","rowNode","type","pinnedRowsCache","pinnedRows","prevModel","idLookup","push","previousCache","getRowModels","dataRows","idRowsLookup","Map","map","_idRowsLookup$id","getRowsCount","getAllRowIds","getRowIndexRelativeToVisibleRows","setRowChildrenExpansion","isExpanded","currentNode","newNode","childrenExpanded","tree","_gridRowTreeSelector$","getRowGroupChildren","_ref3","skipAutoGeneratedRows","groupId","applySorting","applyFiltering","children","groupNode","sortedRowIds","startIndex","findIndex","depth","filteredRowsLookup","filter","childId","setRowIndex","rowId","targetIndex","parent","group","instanceId","allRows","oldIndex","updatedRows","splice","replaceRows","firstRowToRender","newRows","treeDepth","dataRowIdToModelLookup","dataRowIdToIdLookup","rootGroup","rootGroupChildren","seenIds","Set","i","rowModel","removedRowId","has","rowTreeNodeConfig","groupingKey","add","dataRowIds","_tree$childId","rowApi","unstable_replaceRows","rowProApi","groupRows","info","handleStrategyProcessorChange","methodName","handleStrategyActivityChange","getActiveStrategy","applyHydrateRowsProcessor","response","unstable_applyPipeProcessors","treeDepths","totalTopLevelRowCount","isFirstRender","useEffect","isRowCountPropUpdated","areNewRowsAlreadyInState","isNewLoadingAlreadyInState","loadingPropBeforePartialUpdates","isNewRowCountAlreadyInState","rowCountPropBeforePartialUpdates","totalRowCount","Math","max"],"sources":["D:/Users/Joshua/GitHub/pub-001/react-01/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowGroupingNameSelector, gridRowTreeDepthsSelector, gridDataRowIdsSelector, gridRowsDataRowIdToIdLookupSelector, gridRowMaximumTreeDepthSelector } from './gridRowsSelector';\nimport { useTimeout } from '../../utils/useTimeout';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, isAutoGeneratedRow, GRID_ROOT_GROUP_ID, GRID_ID_AUTOGENERATED, updateCacheWithNewRows, getTopLevelRowCount, getRowIdFromRowModel } from './gridRowsUtils';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.rows = createRowsInternalCache({\n    rows: props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {\n      // Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const lastUpdateMs = React.useRef(Date.now());\n  const lastRowCount = React.useRef(props.rowCount);\n  const timeout = useTimeout();\n  const getRow = React.useCallback(id => {\n    const model = gridRowsLookupSelector(apiRef)[id];\n    if (model) {\n      return model;\n    }\n    const node = apiRef.current.getRowNode(id);\n    if (node && isAutoGeneratedRow(node)) {\n      return {\n        [GRID_ID_AUTOGENERATED]: id\n      };\n    }\n    return null;\n  }, [apiRef]);\n  const getRowIdProp = props.getRowId;\n  const getRowId = React.useCallback(row => {\n    if (GRID_ID_AUTOGENERATED in row) {\n      return row[GRID_ID_AUTOGENERATED];\n    }\n    if (getRowIdProp) {\n      return getRowIdProp(row);\n    }\n    return row.id;\n  }, [getRowIdProp]);\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, {\n    id\n  }, index) => {\n    acc[id] = index;\n    return acc;\n  }, {}), [currentPage.rows]);\n  const throttledRowsChange = React.useCallback(({\n    cache,\n    throttle\n  }) => {\n    const run = () => {\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading,\n          previousTree: gridRowTreeSelector(apiRef),\n          previousTreeDepths: gridRowTreeDepthsSelector(apiRef)\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n    timeout.clear();\n    apiRef.current.caches.rows = cache;\n    if (!throttle) {\n      run();\n      return;\n    }\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n    if (throttleRemainingTimeMs > 0) {\n      timeout.start(throttleRemainingTimeMs, run);\n      return;\n    }\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef, timeout]);\n\n  /**\n   * API METHODS\n   */\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    const cache = createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      throw new Error(['MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    const nonPinnedRowsUpdates = [];\n    updates.forEach(update => {\n      const id = getRowIdFromRowModel(update, props.getRowId, 'A row was provided without id when calling updateRows():');\n      const rowNode = apiRef.current.getRowNode(id);\n      if (rowNode?.type === 'pinnedRow') {\n        // @ts-ignore because otherwise `release:build` doesn't work\n        const pinnedRowsCache = apiRef.current.caches.pinnedRows;\n        const prevModel = pinnedRowsCache.idLookup[id];\n        if (prevModel) {\n          pinnedRowsCache.idLookup[id] = _extends({}, prevModel, update);\n        }\n      } else {\n        nonPinnedRowsUpdates.push(update);\n      }\n    });\n    const cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const getRowModels = React.useCallback(() => {\n    const dataRows = gridDataRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(dataRows.map(id => [id, idRowsLookup[id] ?? {}]));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = apiRef.current.getRowNode(id);\n    if (!currentNode) {\n      throw new Error(`MUI X: No row with id #${id} found.`);\n    }\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI X: Only group nodes can be expanded or collapsed.');\n    }\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => gridRowTreeSelector(apiRef)[id] ?? null, [apiRef]);\n  const getRowGroupChildren = React.useCallback(({\n    skipAutoGeneratedRows = true,\n    groupId,\n    applySorting,\n    applyFiltering\n  }) => {\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n    if (applySorting) {\n      const groupNode = tree[groupId];\n      if (!groupNode) {\n        return [];\n      }\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const node = apiRef.current.getRowNode(rowId);\n    if (!node) {\n      throw new Error(`MUI X: No row with id #${rowId} found.`);\n    }\n    if (node.parent !== GRID_ROOT_GROUP_ID) {\n      throw new Error(`MUI X: The row reordering do not support reordering of grouped rows yet.`);\n    }\n    if (node.type !== 'leaf') {\n      throw new Error(`MUI X: The row reordering do not support reordering of footer or grouping rows.`);\n    }\n    apiRef.current.setState(state => {\n      const group = gridRowTreeSelector(state, apiRef.current.instanceId)[GRID_ROOT_GROUP_ID];\n      const allRows = group.children;\n      const oldIndex = allRows.findIndex(row => row === rowId);\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n      const updatedRows = [...allRows];\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [GRID_ROOT_GROUP_ID]: _extends({}, group, {\n              children: updatedRows\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error(['MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (newRows.length === 0) {\n      return;\n    }\n    const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n    const tree = _extends({}, gridRowTreeSelector(apiRef));\n    const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));\n    const dataRowIdToIdLookup = _extends({}, gridRowsDataRowIdToIdLookupSelector(apiRef));\n    const rootGroup = tree[GRID_ROOT_GROUP_ID];\n    const rootGroupChildren = [...rootGroup.children];\n    const seenIds = new Set();\n    for (let i = 0; i < newRows.length; i += 1) {\n      const rowModel = newRows[i];\n      const rowId = getRowIdFromRowModel(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);\n      if (!seenIds.has(removedRowId)) {\n        delete dataRowIdToModelLookup[removedRowId];\n        delete dataRowIdToIdLookup[removedRowId];\n        delete tree[removedRowId];\n      }\n      const rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      dataRowIdToIdLookup[rowId] = rowId;\n      tree[rowId] = rowTreeNodeConfig;\n      seenIds.add(rowId);\n    }\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    });\n\n    // Removes potential remaining skeleton rows from the dataRowIds.\n    const dataRowIds = rootGroupChildren.filter(childId => tree[childId]?.type === 'leaf');\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        dataRowIdToModelLookup,\n        dataRowIdToIdLookup,\n        dataRowIds,\n        tree\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId]);\n  const rowApi = {\n    getRow,\n    getRowId,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    updateRows,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  const rowProApi = {\n    setRowIndex,\n    setRowChildrenExpansion,\n    getRowGroupChildren\n  };\n\n  /**\n   * EVENTS\n   */\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = _extends({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: gridDataRowIdsSelector(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n\n  /**\n   * APPLIERS\n   */\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: gridRowTreeSelector(state, apiRef.current.instanceId),\n        treeDepths: gridRowTreeDepthsSelector(state, apiRef.current.instanceId),\n        dataRowIds: gridDataRowIdsSelector(state, apiRef.current.instanceId),\n        dataRowIdToModelLookup: gridRowsLookupSelector(state, apiRef.current.instanceId),\n        dataRowIdToIdLookup: gridRowsDataRowIdToIdLookupSelector(state, apiRef.current.instanceId)\n      });\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, response, {\n          totalTopLevelRowCount: getTopLevelRowCount({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.rowCount]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'public');\n  useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    let isRowCountPropUpdated = false;\n    if (props.rowCount !== lastRowCount.current) {\n      isRowCountPropUpdated = true;\n      lastRowCount.current = props.rowCount;\n    }\n    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows;\n    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;\n\n    // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n        apiRef.current.forceUpdate();\n      }\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n        apiRef.current.forceUpdate();\n      }\n      if (!isRowCountPropUpdated) {\n        return;\n      }\n    }\n    logger.debug(`Updating all rows, new length ${props.rows.length}`);\n    throttledRowsChange({\n      cache: createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}