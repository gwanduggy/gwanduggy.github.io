{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector, gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { isEventTargetInPortal } from '../../../utils/domUtils';\nimport { isMultipleRowSelectionEnabled } from './utils';\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n  return _extends({}, state, {\n    rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) !== null && _getSelectionModelPro !== void 0 ? _getSelectionModelPro : [] : []\n  });\n};\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = callback => function () {\n    if (props.rowSelection) {\n      callback(...arguments);\n    }\n  };\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) !== null && _lastRowToggled$curre !== void 0 ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(\"Setting selection model\");\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if ((rowNode === null || rowNode === void 0 ? void 0 : rowNode.type) === 'footer' || (rowNode === null || rowNode === void 0 ? void 0 : rowNode.type) === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback(function (id) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(\"Setting selection for row \".concat(id));\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(\"Toggling selection for row \".concat(id));\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback(function (ids) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(\"Setting selection for several rows\");\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(function (_ref) {\n    let {\n      startId,\n      endId\n    } = _ref;\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(\"Expanding selection from row \".concat(startId, \" to row \").concat(endId));\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _event$target$closest;\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = (_event$target$closest = event.target.closest(\".\".concat(gridClasses.cell))) === null || _event$target$closest === void 0 ? void 0 : _event$target$closest.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if ((column === null || column === void 0 ? void 0 : column.type) === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) === null || _window$getSelection === void 0 || _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    const filterModel = gridFilterModelSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value, (filterModel === null || filterModel === void 0 ? void 0 : filterModel.items.length) > 0);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n};","map":{"version":3,"names":["_extends","React","GridSignature","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","gridRowSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridExpandedSortedRowIdsSelector","gridFilterModelSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","isEventTargetInPortal","isMultipleRowSelectionEnabled","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","rowSelectionStateInitializer","state","props","_getSelectionModelPro","rowSelection","rowSelectionModel","useGridRowSelection","apiRef","logger","runIfRowSelectionIsEnabled","callback","arguments","propRowSelectionModel","useMemo","current","lastRowToggled","useRef","registerControlState","stateId","propModel","propOnChange","onRowSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableRowSelectionOnClick","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","visibleRows","expandMouseRowRangeSelection","useCallback","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setRowSelectionModel","model","signature","DataGrid","length","Error","join","currentModel","debug","setState","forceUpdate","includes","getRowParams","rowNode","getRowNode","type","getSelectedRows","selectRow","undefined","resetSelection","concat","selection","newSelection","filter","el","push","isSelectionValid","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","_ref","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionPublicApi","selectionPrivateApi","removeOutdatedSelection","keepNonExistentRowsSelected","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleRowClick","params","_event$target$closest","field","target","closest","cell","getAttribute","column","getColumn","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","shouldLimitSelectionToCurrentPage","checkboxSelectionVisibleOnly","pagination","rowsToBeSelected","filterModel","items","handleCellKeyDown","getCellMode","Edit","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","getAllRowIds","useEffect","isStateControlled"],"sources":["D:/Users/Joshua/GitHub/pub-001/react-01/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector, gridFilterModelSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { isEventTargetInPortal } from '../../../utils/domUtils';\nimport { isMultipleRowSelectionEnabled } from './utils';\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => _extends({}, state, {\n  rowSelection: props.rowSelection ? getSelectionModelPropValue(props.rowSelectionModel) ?? [] : []\n});\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  };\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    let endId = id;\n    const startId = lastRowToggled.current ?? id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = event.target.closest(`.${gridClasses.cell}`)?.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      window.getSelection()?.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    const filterModel = gridFilterModelSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value, filterModel?.items.length > 0);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}